{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 85, "column": 0}, "map": {"version":3,"sources":["file:///Users/anishaandapally/Desktop/knighthacks25/study-spark/src/lib/supabase/server.ts"],"sourcesContent":["import { createServerClient } from '@supabase/ssr';\nimport { cookies } from 'next/headers';\n\nexport async function createClient() {\n  const cookieStore = await cookies();\n\n  return createServerClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        getAll() {\n          return cookieStore.getAll();\n        },\n        setAll(cookiesToSet) {\n          try {\n            cookiesToSet.forEach(({ name, value, options }) =>\n              cookieStore.set(name, value, options)\n            );\n          } catch {\n            // The `setAll` method was called from a Server Component.\n            // This can be ignored if you have middleware refreshing\n            // user sessions.\n          }\n        },\n      },\n    }\n  );\n}\n"],"names":[],"mappings":";;;;AAAA;AAAA;AACA;;;AAEO,eAAe;IACpB,MAAM,cAAc,MAAM,IAAA,0LAAO;IAEjC,OAAO,IAAA,+OAAkB,sUAGvB;QACE,SAAS;YACP;gBACE,OAAO,YAAY,MAAM;YAC3B;YACA,QAAO,YAAY;gBACjB,IAAI;oBACF,aAAa,OAAO,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,GAC5C,YAAY,GAAG,CAAC,MAAM,OAAO;gBAEjC,EAAE,OAAM;gBACN,0DAA0D;gBAC1D,wDAAwD;gBACxD,iBAAiB;gBACnB;YACF;QACF;IACF;AAEJ","debugId":null}},
    {"offset": {"line": 123, "column": 0}, "map": {"version":3,"sources":["file:///Users/anishaandapally/Desktop/knighthacks25/study-spark/src/app/auth/callback/route.ts"],"sourcesContent":["import { createClient } from '@/lib/supabase/server';\nimport { NextResponse } from 'next/server';\n\nexport async function GET(request: Request) {\n  const requestUrl = new URL(request.url);\n  const code = requestUrl.searchParams.get('code');\n\n  if (code) {\n    const supabase = await createClient();\n\n    // Complete the OAuth flow by exchanging the code for a session\n    const { error } = await supabase.auth.exchangeCodeForSession(code);\n\n    if (error) {\n      console.error('Error exchanging OAuth code for session:', error.message);\n      // You can choose to redirect somewhere else or add a query param here if you want\n    }\n  }\n\n  // Redirect to progress page after auth attempt\n  return NextResponse.redirect(new URL('/progress', requestUrl.origin));\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEO,eAAe,IAAI,OAAgB;IACxC,MAAM,aAAa,IAAI,IAAI,QAAQ,GAAG;IACtC,MAAM,OAAO,WAAW,YAAY,CAAC,GAAG,CAAC;IAEzC,IAAI,MAAM;QACR,MAAM,WAAW,MAAM,IAAA,gMAAY;QAEnC,+DAA+D;QAC/D,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,SAAS,IAAI,CAAC,sBAAsB,CAAC;QAE7D,IAAI,OAAO;YACT,QAAQ,KAAK,CAAC,4CAA4C,MAAM,OAAO;QACvE,kFAAkF;QACpF;IACF;IAEA,+CAA+C;IAC/C,OAAO,8LAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,aAAa,WAAW,MAAM;AACrE","debugId":null}}]
}